{"ast":null,"code":"var _jsxFileName = \"/Users/denghanbo/Desktop/test/src/view/Dati.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Popover, NavBar, Icon, Button } from 'antd-mobile';\nimport 'antd-mobile/dist/antd-mobile.css';\nimport Axios from 'axios';\n\nclass DatiCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentTimu: 0\n    };\n  }\n\n  render() {\n    let timuList = this.props.timuList;\n\n    if (timuList.length > 0) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 21\n        }\n      }, \"\\u9898\\u76EE:\", timuList[this.state.currentTimu].quiz), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"options\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 21\n        }\n      }, \"\\u9898\\u76EE\\u5217\\u8868\"));\n    } else {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }\n      }, \"Loading......\"));\n    }\n  }\n\n  componentWillMount() {\n    console.log(\"componentWillMount开始执行\");\n    this.props.getTim();\n  }\n\n  componentWillReceiveProps() {\n    console.log(\"componentWillReceiveProps开始执行\");\n    console.log(this.props);\n  }\n\n} //将state映射到props函数\n\n\nfunction mapStateToProps(state) {\n  return {\n    value: state.num,\n    timuList: state.timuList\n  };\n}\n\nconst addAction = {\n  type: 'add'\n};\nconst host = 'http://localhost:8080'; //将修改state数据的方法，映射到props,默认会传入store里的dispach方法\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    getTim: async () => {\n      await Axios({\n        method: 'get',\n        url: host + '/find',\n        params: {\n          page: 1,\n          size: 10\n        }\n      }).then(function (response) {\n        console.log('异步请求数据结束');\n        console.log(response.data);\n        dispatch({\n          type: \"setTimu\",\n          content: response.data\n        });\n      });\n    }\n  };\n} //将上面的这2个方法，将数据仓库的state和修改state的方法映射到组件上，形成新的组件。\n\n\nconst Dati = connect(mapStateToProps, mapDispatchToProps)(DatiCounter);\nexport default Dati;","map":{"version":3,"sources":["/Users/denghanbo/Desktop/test/src/view/Dati.js"],"names":["React","connect","Popover","NavBar","Icon","Button","Axios","DatiCounter","Component","constructor","props","state","currentTimu","render","timuList","length","quiz","componentWillMount","console","log","getTim","componentWillReceiveProps","mapStateToProps","value","num","addAction","type","host","mapDispatchToProps","dispatch","method","url","params","page","size","then","response","data","content","Dati"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,MAAhC,QAA8C,aAA9C;AACA,OAAO,kCAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,WAAN,SAA0BP,KAAK,CAACQ,SAAhC,CAA0C;AAEtCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE;AADJ,KAAb;AAIH;;AAEDC,EAAAA,MAAM,GAAG;AAEL,QAAIC,QAAQ,GAAG,KAAKJ,KAAL,CAAWI,QAA1B;;AAEA,QAAGA,QAAQ,CAACC,MAAT,GAAgB,CAAnB,EAAqB;AAEjB,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAQD,QAAQ,CAAC,KAAKH,KAAL,CAAWC,WAAZ,CAAR,CAAiCI,IAAzC,CADJ,eAGI;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAHJ,CADJ;AAUH,KAZD,MAYK;AAED,0BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADJ,CADJ;AAQH;AAGJ;;AAEDC,EAAAA,kBAAkB,GAAG;AACjBC,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,SAAKT,KAAL,CAAWU,MAAX;AACH;;AAEDC,EAAAA,yBAAyB,GAAE;AACvBH,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKT,KAAjB;AAEH;;AAnDqC,C,CA0D1C;;;AACA,SAASY,eAAT,CAAyBX,KAAzB,EAAgC;AAC5B,SAAO;AACHY,IAAAA,KAAK,EAAEZ,KAAK,CAACa,GADV;AAEHV,IAAAA,QAAQ,EAACH,KAAK,CAACG;AAFZ,GAAP;AAIH;;AAED,MAAMW,SAAS,GAAG;AACdC,EAAAA,IAAI,EAAE;AADQ,CAAlB;AAIA,MAAMC,IAAI,GAAG,uBAAb,C,CAEA;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAElC,SAAO;AACHT,IAAAA,MAAM,EAAE,YAAY;AAEhB,YAAMd,KAAK,CAAC;AACRwB,QAAAA,MAAM,EAAE,KADA;AAERC,QAAAA,GAAG,EAAEJ,IAAI,GAAC,OAFF;AAGRK,QAAAA,MAAM,EAAE;AACNC,UAAAA,IAAI,EAAE,CADA;AAENC,UAAAA,IAAI,EAAE;AAFA;AAHA,OAAD,CAAL,CAODC,IAPC,CAOI,UAAUC,QAAV,EAAoB;AAE1BlB,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAQ,CAACC,IAArB;AACAR,QAAAA,QAAQ,CAAC;AAAEH,UAAAA,IAAI,EAAE,SAAR;AAAmBY,UAAAA,OAAO,EAAEF,QAAQ,CAACC;AAArC,SAAD,CAAR;AACD,OAZG,CAAN;AAcH;AAjBE,GAAP;AAmBH,C,CAED;;;AACA,MAAME,IAAI,GAAGtC,OAAO,CAChBqB,eADgB,EAEhBM,kBAFgB,CAAP,CAGXrB,WAHW,CAAb;AAMA,eAAegC,IAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport { Popover, NavBar, Icon, Button } from 'antd-mobile';\nimport 'antd-mobile/dist/antd-mobile.css';\nimport Axios from 'axios';\n\nclass DatiCounter extends React.Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            currentTimu: 0,\n            \n        }\n    }\n\n    render() {\n        \n        let timuList = this.props.timuList;\n        \n        if(timuList.length>0){\n\n            return (\n                <div>\n                    <h1>题目:{timuList[this.state.currentTimu].quiz}</h1>\n                    \n                    <div className=\"options\">\n                        题目列表\n                    </div>\n                </div>\n            )\n\n        }else{\n\n            return (\n                <div>\n                    <h1>Loading......</h1>\n                    \n                  \n                </div>\n            )\n\n        }\n\n        \n    }\n\n    componentWillMount() {\n        console.log(\"componentWillMount开始执行\");\n        this.props.getTim();\n    }\n\n    componentWillReceiveProps(){\n        console.log(\"componentWillReceiveProps开始执行\");\n        console.log(this.props);\n\n    }\n\n    \n}\n\n\n\n//将state映射到props函数\nfunction mapStateToProps(state) {\n    return {\n        value: state.num,\n        timuList:state.timuList\n    }\n}\n\nconst addAction = {\n    type: 'add'\n}\n\nconst host = 'http://localhost:8080';\n\n//将修改state数据的方法，映射到props,默认会传入store里的dispach方法\nfunction mapDispatchToProps(dispatch) {\n    \n    return {\n        getTim: async () => {\n\n            await Axios({\n                method: 'get',\n                url: host+'/find',\n                params: {\n                  page: 1,\n                  size: 10\n                }\n              }).then(function (response) {\n          \n                console.log('异步请求数据结束');\n                console.log(response.data);\n                dispatch({ type: \"setTimu\", content: response.data });\n              });\n\n        }\n    }\n}\n\n//将上面的这2个方法，将数据仓库的state和修改state的方法映射到组件上，形成新的组件。\nconst Dati = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(DatiCounter)\n\n\nexport default Dati"]},"metadata":{},"sourceType":"module"}