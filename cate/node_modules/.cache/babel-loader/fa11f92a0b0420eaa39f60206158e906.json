{"ast":null,"code":"var _jsxFileName = \"/Users/denghanbo/Desktop/test/src/component/Category.js\";\nimport React from 'react';\nimport 'antd-mobile/dist/antd-mobile.css';\nimport { Menu, ActivityIndicator, NavBar } from 'antd-mobile';\nimport '../assets/css/style.css';\nimport { connect } from 'react-redux';\nimport { SegmentedControl, WingBlank } from 'antd-mobile'; //将state映射到props函数\n\nfunction mapStateToProps(state) {\n  return {\n    category: state.category\n  };\n} //将修改state数据的方法，映射到props,默认会传入store里的dispach方法\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    setCategory: e => {\n      dispatch({\n        type: \"setCategory\",\n        category: e\n      });\n    }\n  };\n}\n\nclass SegmentedControlTmp extends React.Component {\n  constructor(props) {\n    super(props); //状态（数据）--》view\n    //构造函数初始化数据，将需要改变的数据初始化到state中\n\n    this.onChange = e => {\n      console.log(`selectedIndex:${e.nativeEvent.selectedSegmentIndex}`);\n\n      if (e.nativeEvent.selectedSegmentIndex == 0) {\n        this.props.setCategory(\"菜品\");\n        this.setState({\n          status: 0\n        });\n      } else {\n        this.props.setCategory(\"食材\");\n        this.setState({\n          status: 1\n        });\n      }\n    };\n\n    this.onValueChange = value => {\n      console.log(value);\n    };\n\n    this.state = {\n      status: 0\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(WingBlank, {\n      size: \"lg\",\n      className: \"sc-example\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SegmentedControl, {\n      values: ['菜品', '食材'],\n      onChange: this.onChange,\n      onValueChange: this.onValueChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }));\n  }\n\n} //将上面的这2个方法，将数据仓库的state和修改state的方法映射到组件上，形成新的组件。\n\n\nconst SegmentedControlExample = connect(mapStateToProps, mapDispatchToProps)(SegmentedControlTmp);\nexport default SegmentedControlExample;","map":{"version":3,"sources":["/Users/denghanbo/Desktop/test/src/component/Category.js"],"names":["React","Menu","ActivityIndicator","NavBar","connect","SegmentedControl","WingBlank","mapStateToProps","state","category","mapDispatchToProps","dispatch","setCategory","e","type","SegmentedControlTmp","Component","constructor","props","onChange","console","log","nativeEvent","selectedSegmentIndex","setState","status","onValueChange","value","render","SegmentedControlExample"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,kCAAP;AACA,SAASC,IAAT,EAAeC,iBAAf,EAAkCC,MAAlC,QAAgD,aAAhD;AACA,OAAO,yBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,EAA2BC,SAA3B,QAA4C,aAA5C,C,CAQA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHC,IAAAA,QAAQ,EAAED,KAAK,CAACC;AADb,GAAP;AAGH,C,CAID;;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAElC,SAAO;AACHC,IAAAA,WAAW,EAAGC,CAAD,IAAO;AAChBF,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,aAAR;AAAuBL,QAAAA,QAAQ,EAAEI;AAAjC,OAAD,CAAR;AACH;AAHE,GAAP;AAKH;;AAID,MAAME,mBAAN,SAAkCf,KAAK,CAACgB,SAAxC,CAAkD;AAE9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAEf;AACA;;AAHe,SAWnBC,QAXmB,GAWPN,CAAD,IAAO;AACdO,MAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBR,CAAC,CAACS,WAAF,CAAcC,oBAAqB,EAAhE;;AAEA,UAAIV,CAAC,CAACS,WAAF,CAAcC,oBAAd,IAAsC,CAA1C,EAA6C;AAEzC,aAAKL,KAAL,CAAWN,WAAX,CAAuB,IAAvB;AAEA,aAAKY,QAAL,CAAc;AACVC,UAAAA,MAAM,EAAE;AADE,SAAd;AAGH,OAPD,MAOO;AACH,aAAKP,KAAL,CAAWN,WAAX,CAAuB,IAAvB;AAEA,aAAKY,QAAL,CAAc;AACVC,UAAAA,MAAM,EAAE;AADE,SAAd;AAGH;AAEJ,KA7BkB;;AAAA,SA8BnBC,aA9BmB,GA8BFC,KAAD,IAAW;AACvBP,MAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACH,KAhCkB;;AAIf,SAAKnB,KAAL,GAAa;AACTiB,MAAAA,MAAM,EAAE;AADC,KAAb;AAGH;;AA0BDG,EAAAA,MAAM,GAAG;AACL,wBAGI,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAC,IAAhB;AAAqB,MAAA,SAAS,EAAC,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,gBAAD;AAAkB,MAAA,MAAM,EAAE,CAAC,IAAD,EAAO,IAAP,CAA1B;AACI,MAAA,QAAQ,EAAE,KAAKT,QADnB;AAEI,MAAA,aAAa,EAAE,KAAKO,aAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAHJ;AAWH;;AA/C6C,C,CAoDlD;;;AACA,MAAMG,uBAAuB,GAAGzB,OAAO,CACnCG,eADmC,EAEnCG,kBAFmC,CAAP,CAG9BK,mBAH8B,CAAhC;AAMA,eAAec,uBAAf","sourcesContent":["\nimport React from 'react';\nimport 'antd-mobile/dist/antd-mobile.css';\nimport { Menu, ActivityIndicator, NavBar } from 'antd-mobile';\nimport '../assets/css/style.css'\nimport { connect } from 'react-redux'\nimport { SegmentedControl, WingBlank } from 'antd-mobile';\n\n\n\n\n\n\n\n//将state映射到props函数\nfunction mapStateToProps(state) {\n    return {\n        category: state.category,\n    }\n}\n\n\n\n//将修改state数据的方法，映射到props,默认会传入store里的dispach方法\nfunction mapDispatchToProps(dispatch) {\n\n    return {\n        setCategory: (e) => {\n            dispatch({ type: \"setCategory\", category: e });\n        }\n    }\n}\n\n\n\nclass SegmentedControlTmp extends React.Component {\n\n    constructor(props) {\n        super(props)\n        //状态（数据）--》view\n        //构造函数初始化数据，将需要改变的数据初始化到state中\n        this.state = {\n            status: 0\n        }\n    }\n\n\n\n    onChange = (e) => {\n        console.log(`selectedIndex:${e.nativeEvent.selectedSegmentIndex}`);\n\n        if (e.nativeEvent.selectedSegmentIndex == 0) {\n\n            this.props.setCategory(\"菜品\")\n\n            this.setState({\n                status: 0\n            })\n        } else {\n            this.props.setCategory(\"食材\")\n           \n            this.setState({\n                status: 1\n            })\n        }\n\n    }\n    onValueChange = (value) => {\n        console.log(value);\n    }\n    render() {\n        return (\n\n\n            <WingBlank size=\"lg\" className=\"sc-example\">\n\n                <SegmentedControl values={['菜品', '食材']}\n                    onChange={this.onChange}\n                    onValueChange={this.onValueChange} />\n\n            </WingBlank>\n        );\n    }\n}\n\n\n\n//将上面的这2个方法，将数据仓库的state和修改state的方法映射到组件上，形成新的组件。\nconst SegmentedControlExample = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SegmentedControlTmp)\n\n\nexport default SegmentedControlExample"]},"metadata":{},"sourceType":"module"}