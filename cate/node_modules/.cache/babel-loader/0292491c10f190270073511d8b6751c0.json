{"ast":null,"code":"var _jsxFileName = \"/Users/denghanbo/Desktop/test/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { connect, Provider } from 'react-redux';\nimport { Button } from 'antd-mobile';\n\nclass Counter extends React.Component {\n  render() {\n    console.log(this.props); //计数，通过stroe的state传给props,直接通过props就可以将state的数据获取\n\n    const value = this.props.value; //将修改数据的事件或者方法传入到props\n\n    const onAddClick = this.props.onAddClick; //等同于vuex的mapMutation mapState\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }, \"\\u8BA1\\u6570\\u7684\\u6570\\u91CF\\uFF1A\", value), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: onAddClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }\n    }, \"\\u6570\\u5B57+1\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.props.onAddClick5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }\n    }, \"\\u6570\\u5B57+5\"));\n  }\n\n}\n\nlet ActionFnObj = {\n  add: function (state, action) {\n    state.num++;\n    return state;\n  },\n  addNum: function (state, action) {\n    state.num = state.num + action.num;\n    return state;\n  }\n};\n\nfunction reducer(state = {\n  num: 0\n}, action) {\n  if (action.type.indexOf('redux') === -1) {\n    state = ActionFnObj[action.type](state, action);\n    return { ...state\n    };\n  } else {\n    return state;\n  }\n}\n\nconst store = createStore(reducer); //将state映射到props函数\n\nfunction mapStateToProps(state) {\n  return {\n    value: state.num\n  };\n}\n\nconst addAction = {\n  type: 'add'\n}; //将修改state数据的方法，映射到props,默认会传入store里的dispach方法\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onAddClick: () => {\n      dispatch(addAction);\n    },\n    onAddClick5: () => {\n      dispatch({\n        type: \"addNum\",\n        num: 5\n      });\n    }\n  };\n} //将上面的这2个方法，将数据仓库的state和修改state的方法映射到组件上，形成新的组件。\n\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(Counter);\nReactDOM.render( /*#__PURE__*/React.createElement(Provider, {\n  store: store,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(Button, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }\n}, \"test\")), document.querySelector(\"#root\"));","map":{"version":3,"sources":["/Users/denghanbo/Desktop/test/src/index.js"],"names":["React","ReactDOM","createStore","connect","Provider","Button","Counter","Component","render","console","log","props","value","onAddClick","onAddClick5","ActionFnObj","add","state","action","num","addNum","reducer","type","indexOf","store","mapStateToProps","addAction","mapDispatchToProps","dispatch","App","document","querySelector"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport {connect, Provider} from 'react-redux'\nimport { Button } from 'antd-mobile';\n\n\nclass Counter extends React.Component{\n    \n    render(){\n        console.log(this.props)\n        //计数，通过stroe的state传给props,直接通过props就可以将state的数据获取\n        const value = this.props.value;\n        //将修改数据的事件或者方法传入到props\n        const onAddClick = this.props.onAddClick;\n        //等同于vuex的mapMutation mapState\n        return (\n            <div>\n                <h1>计数的数量：{value}</h1>\n                <button onClick={onAddClick}>数字+1</button>\n                <button onClick={this.props.onAddClick5}>数字+5</button>\n            </div>\n        )\n\n\n    }\n}\n\n\n\nlet ActionFnObj={\n    add:function(state,action){\n        state.num++\n        return state\n    },\n    addNum:function(state,action){\n        \n        state.num = state.num + action.num;\n        return state\n    }\n}\nfunction reducer(state={num:0},action){\n    if(action.type.indexOf('redux')===-1){\n        state = ActionFnObj[action.type](state,action)\n        return {...state}\n    }else{\n        return state;\n    }\n    \n    \n}\n\nconst store = createStore(reducer)\n\n//将state映射到props函数\nfunction mapStateToProps(state){\n    return {\n        value:state.num\n        \n    }\n}\n\nconst addAction = {\n    type:'add'\n}\n//将修改state数据的方法，映射到props,默认会传入store里的dispach方法\nfunction mapDispatchToProps(dispatch){\n    return {\n        onAddClick:()=>{dispatch(addAction)},\n        onAddClick5:()=>{dispatch({type:\"addNum\",num:5})}\n    }\n}\n\n//将上面的这2个方法，将数据仓库的state和修改state的方法映射到组件上，形成新的组件。\nconst App = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Counter)\n\nReactDOM.render(\n    <Provider store={store}>\n        <Button>test</Button>\n    </Provider>,\n    document.querySelector(\"#root\")\n)"]},"metadata":{},"sourceType":"module"}