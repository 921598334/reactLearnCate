{"ast":null,"code":"var _jsxFileName = \"/Users/denghanbo/Desktop/test/src/view/App.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Popover, NavBar, Icon, Button } from 'antd-mobile';\nimport 'antd-mobile/dist/antd-mobile.css';\n\nclass Counter extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.goDataPage = () => {\n      console.log(\"点击了随机答题\");\n      this.props.history.push(\"/dati\");\n    };\n  }\n\n  render() {\n    console.log(this.props); //计数，通过stroe的state传给props,直接通过props就可以将state的数据获取\n\n    const value = this.props.value; //将修改数据的事件或者方法传入到props\n\n    const onAddClick = this.props.onAddClick; //等同于vuex的mapMutation mapState\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }\n    }, \"\\u8BA1\\u6570\\u7684\\u6570\\u91CF\\uFF1A\", value), /*#__PURE__*/React.createElement(Button, {\n      onClick: onAddClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }, \"\\u6570\\u5B57+1\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.props.onAddClick5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, \"\\u6570\\u5B57+5\"), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.goDataPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, \"\\u968F\\u673A\\u7B54\\u9898\"));\n  }\n\n} //将state映射到props函数\n\n\nfunction mapStateToProps(state) {\n  return {\n    value: state.num\n  };\n}\n\nconst addAction = {\n  type: 'add'\n}; //将修改state数据的方法，映射到props,默认会传入store里的dispach方法\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onAddClick: () => {\n      dispatch(addAction);\n    },\n    onAddClick5: () => {\n      dispatch({\n        type: \"addNum\",\n        num: 5\n      });\n    }\n  };\n} //将上面的这2个方法，将数据仓库的state和修改state的方法映射到组件上，形成新的组件。\n\n\nconst App = connect(mapStateToProps, mapDispatchToProps)(Counter);\nexport default App;","map":{"version":3,"sources":["/Users/denghanbo/Desktop/test/src/view/App.js"],"names":["React","connect","Popover","NavBar","Icon","Button","Counter","Component","goDataPage","console","log","props","history","push","render","value","onAddClick","onAddClick5","mapStateToProps","state","num","addAction","type","mapDispatchToProps","dispatch","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,IAA1B,EAA+BC,MAA/B,QAA6C,aAA7C;AACA,OAAO,kCAAP;;AAEA,MAAMC,OAAN,SAAsBN,KAAK,CAACO,SAA5B,CAAsC;AAAA;AAAA;;AAAA,SAsBpCC,UAtBoC,GAsBzB,MAAI;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,WAAKC,KAAL,CAAWC,OAAX,CAAmBC,IAAnB,CAAwB,OAAxB;AACD,KAzBmC;AAAA;;AAEpCC,EAAAA,MAAM,GAAG;AACPL,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB,EADO,CAEP;;AACA,UAAMI,KAAK,GAAG,KAAKJ,KAAL,CAAWI,KAAzB,CAHO,CAIP;;AACA,UAAMC,UAAU,GAAG,KAAKL,KAAL,CAAWK,UAA9B,CALO,CAMP;;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAAWD,KAAX,CADF,eAEE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAEC,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,eAGE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKL,KAAL,CAAWM,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHF,eAKE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAKT,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCALF,CADF;AAWD;;AApBmC,C,CA+BtC;;;AACA,SAASU,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLJ,IAAAA,KAAK,EAAEI,KAAK,CAACC;AADR,GAAP;AAID;;AAED,MAAMC,SAAS,GAAG;AAChBC,EAAAA,IAAI,EAAE;AADU,CAAlB,C,CAGA;;AACA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AACpC,SAAO;AACLR,IAAAA,UAAU,EAAE,MAAM;AAAEQ,MAAAA,QAAQ,CAACH,SAAD,CAAR;AAAqB,KADpC;AAELJ,IAAAA,WAAW,EAAE,MAAM;AAAEO,MAAAA,QAAQ,CAAC;AAAEF,QAAAA,IAAI,EAAE,QAAR;AAAkBF,QAAAA,GAAG,EAAE;AAAvB,OAAD,CAAR;AAAsC;AAFtD,GAAP;AAID,C,CAED;;;AACA,MAAMK,GAAG,GAAGxB,OAAO,CACjBiB,eADiB,EAEjBK,kBAFiB,CAAP,CAGVjB,OAHU,CAAZ;AAMA,eAAemB,GAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux'\nimport { Popover, NavBar, Icon,Button } from 'antd-mobile';\nimport 'antd-mobile/dist/antd-mobile.css';\n\nclass Counter extends React.Component {\n\n  render() {\n    console.log(this.props)\n    //计数，通过stroe的state传给props,直接通过props就可以将state的数据获取\n    const value = this.props.value;\n    //将修改数据的事件或者方法传入到props\n    const onAddClick = this.props.onAddClick;\n    //等同于vuex的mapMutation mapState\n    return (\n      <div>\n        <h1>计数的数量：{value}</h1>\n        <Button onClick={onAddClick}>数字+1</Button>\n        <Button onClick={this.props.onAddClick5}>数字+5</Button>\n\n        <Button onClick={this.goDataPage}>随机答题</Button>\n\n\n      </div>\n    )\n  }\n\n  goDataPage=()=>{\n    console.log(\"点击了随机答题\");\n    this.props.history.push(\"/dati\");\n  }\n\n}\n\n\n\n//将state映射到props函数\nfunction mapStateToProps(state) {\n  return {\n    value: state.num\n\n  }\n}\n\nconst addAction = {\n  type: 'add'\n}\n//将修改state数据的方法，映射到props,默认会传入store里的dispach方法\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onAddClick: () => { dispatch(addAction) },\n    onAddClick5: () => { dispatch({ type: \"addNum\", num: 5 }) }\n  }\n}\n\n//将上面的这2个方法，将数据仓库的state和修改state的方法映射到组件上，形成新的组件。\nconst App = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Counter)\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}